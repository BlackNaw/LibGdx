package com.ivan.acciones;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.actions.Actions;
import com.badlogic.gdx.scenes.scene2d.actions.MoveToAction;
import com.badlogic.gdx.scenes.scene2d.actions.ParallelAction;

public class MyActorTres extends Actor {
	Texture texture=new Texture(Gdx.files.internal("halcon.png"));
	//Algo en lo que pondremos mas enfasis es la maquina de estados
	public boolean started=false;
	
	//Acciones paralelas
	MoveToAction mover=new MoveToAction();
	ParallelAction movimientos= new ParallelAction();
	
	public MyActorTres() {
		// darle las dimensiones
		setBounds(0, 0, texture.getWidth(), texture.getHeight());
		//Doy las caracteristicas de moviento a la accion
		
		mover.setPosition(300f, 35f);
		mover.setDuration(3f);
		//añadir las acciones que queremos que se ejecuten a la vez
		movimientos.addAction(mover);
		//usando metodos estaticos
		movimientos.addAction(Actions.rotateBy(90,10f));
	}
	
	//Aqui nos encargamos de dibujar
	@Override
	public void draw(Batch batch, float parentAlpha) {
		super.draw(batch, parentAlpha);
		batch.draw(texture,this.getX(),this.getY());
	}
	
	//Aqui nos encargamos del comportamiento
	@Override
	public void act(float delta) {
		super.act(delta);
	}
}
