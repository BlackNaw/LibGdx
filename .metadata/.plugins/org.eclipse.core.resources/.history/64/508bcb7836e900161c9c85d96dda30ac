package com.ivan.fisicas;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;

public class Fuerzas extends ApplicationAdapter implements InputProcessor {

	SpriteBatch batch;
	Texture img;
	Sprite sprite;

	// Box2d
	World world;
	Body body;
	
	//100 pixelos son un metro
	final float PIXELS_TO_METERS=100f;

	@Override
	public void create() {
		super.create();
		batch = new SpriteBatch();
		img = new Texture("badlogic.jpg");
		// Se le puede dar posicion
		sprite = new Sprite(img);
		// Ponemos la imagen dentro de la pantalla
		sprite.setPosition( - sprite.getWidth() / 2,- sprite.getHeight() / 2);
		// definimos el mundo
		world = new World(new Vector2(0, 0), true);

		// vamos a adecuar el body al mundo
		BodyDef bodyDef = new BodyDef();
		bodyDef.type = BodyType.DynamicBody;

		// No vamos a usar escala. de forma que un pixel en un metro en el mundo
		// real
		bodyDef.position.set((sprite.getX()+sprite.getWidth()/2)/PIXELS_TO_METERS, (sprite.getY()+sprite.getHeight()/2)/PIXELS_TO_METERS);
	}

	@Override
	public void render() {
		Gdx.gl.glClearColor(1, 0, 0, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		// El avanze del mundo se mide por la cantidad de tiempo transcurrido
		// desde el ultimo frame. Esto no lo vamos ha hacer siempre en el render
		/*
		 * Lo primero es definir ciertas caracteriscas del interalo del render
		 * el segundo parametro se refiere a la cantidad de calculos para la
		 * velocidad el tercero a la cantidad de calculos para la posicion
		 */
		world.step(Gdx.graphics.getDeltaTime(), 6, 2);
		sprite.setPosition(body.getPosition().x, body.getPosition().y);
		batch.begin();
		batch.draw(sprite, sprite.getX(), sprite.getY());
		batch.end();
	}

	@Override
	public void dispose() {
		batch.dispose();
		img.dispose();
		world.dispose();
	}

	@Override
	public boolean keyDown(int keycode) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean keyUp(int keycode) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean keyTyped(char character) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDown(int screenX, int screenY, int pointer, int button) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchUp(int screenX, int screenY, int pointer, int button) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDragged(int screenX, int screenY, int pointer) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean mouseMoved(int screenX, int screenY) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean scrolled(int amount) {
		// TODO Auto-generated method stub
		return false;
	}

}
