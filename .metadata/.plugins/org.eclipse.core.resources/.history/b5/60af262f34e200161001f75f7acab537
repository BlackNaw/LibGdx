package com.juangra.asteroids;

import java.util.ArrayList;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;

import comun.Constantes;
import comun.GifDecoder;
import comun.Posicion;
import comun.Rectangulo;
import comun.Sondeo;
import elementos.Actor;
import elementos.Asteroide;
import elementos.AtSt;

import static comun.Constantes.*;

public class MyGdxGame extends ApplicationAdapter {
	SpriteBatch batch;
	Actor nave;
	ArrayList<Asteroide> asteroides = new ArrayList<>();
	AtSt at;
	Rectangulo pantalla;
	Animation<?> fondo, atAtD, atAtI;
	Texture perdido;
	float frameCounter;
	Music musicaFondo;
	boolean gameOver;

	@Override
	public void create() {
		batch = new SpriteBatch();
		nave = new Actor(new Posicion(Gdx.graphics.getWidth() / 3, 0), new Texture(Gdx.files.internal("nave.png")));
		for (int i = 0; i < Constantes.NUMERO_ASTEROIDES; i++) {
			asteroides.add(new Asteroide(new Texture(Gdx.files.internal("asteroide.png"))));
		}
		at = new AtSt();
		// atAtD = GifDecoder.loadGIF("at-at.gif");
		// atAtI = GifDecoder.loadGIF("at-at-izq.gif");
		pantalla = new Rectangulo(new Posicion(0, 0), Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
		fondo = GifDecoder.loadGIF("estrellas.gif");
		perdido = new Texture("gameover.png");
		musicaFondo = Gdx.audio.newMusic(Gdx.files.internal("musica/bso.ogg"));
		musicaFondo.setVolume(1f);
		musicaFondo.play();
		gameOver = true;
	}

	@Override
	public void render() {
		if (nave.alive) {
			Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
			// inputs
			// Sondeo obtiene la direccion pulsada, establece direccion valida
			// la
			// direccion obtenida
			nave.direccionActual = (Sondeo.detectar(nave.direccionActual));
			// logica
			if (!nave.enLimitesPantalla(pantalla))
				nave.direccionActual = nave.direccionActual.getContradireccion();
			nave.mover();
			// at.actualizar(nave.cuerpo);
			at.mover();
			for (Asteroide asteroide : asteroides) {
				if (nave.comprobarColision(asteroide.cuerpo) || at.comprobarColision(nave.cuerpo)) {
					nave.alive = false;
				}
				asteroide.actualizar(null);
			}

			frameCounter += Gdx.graphics.getDeltaTime();

			// dibujar
			batch.begin();
			// batch.draw((TextureRegion)atAtI.getKeyFrame(frameCounter,
			// true),0, 0);
			batch.draw((TextureRegion) fondo.getKeyFrame(frameCounter, true), 0, 0,
					((TextureRegion) fondo.getKeyFrame(1f)).getRegionWidth() / 2,
					((TextureRegion) fondo.getKeyFrame(1f)).getRegionHeight() / 2, Gdx.graphics.getWidth(),
					Gdx.graphics.getHeight() + 200, 1f, 1f, -90f);

			nave.pintar(batch);
			at.pintar(batch, frameCounter);
			for (Asteroide asteroide : asteroides) {
				asteroide.pintar(batch);
			}
			batch.end();
		} else {
			batch.begin();
			batch.draw(perdido, 0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
			if (gameOver) {
				musicaFondo.stop();
				SONIDO_GAMEOVER.play();
				gameOver = false;
			}
			batch.end();
			if(Gdx.input.isKeyJustPressed(Keys.ENTER)){
				nave.alive=true;
				dispose();
				create();
			}
		}

	}

	@Override
	public void dispose() {
		batch.dispose();
		nave.dispose();
		at.dispose();
		SONIDO_MOVIMIENTO.dispose();
		SONIDO_DISPARO.dispose();
		SONIDO_GAMEOVER.dispose();
		musicaFondo.dispose();
		for (Asteroide asteroide : asteroides) {
			asteroide.dispose();
		}
		perdido.dispose();

	}
}
